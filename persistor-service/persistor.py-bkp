from flask import Flask, request, jsonify
import psycopg2, time, logging, sys

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

@app.route("/health", methods=["GET"])
def health():
    return "OK", 200

time.sleep(3)  # wait for DB

# Connect to Postgres (hardcoded)
#conn = psycopg2.connect("dbname=packetdb user=packetuser password=packetpass host=db port=5432")
#cur = conn.cursor()


# Connect to Postgres (hardcoded)
try:
    conn = psycopg2.connect("dbname=packetdb user=packetuser password=packetpass host=db port=5432")
    cur = conn.cursor()
    logging.info("Connected to Postgres âœ…")
except Exception as e:
    logging.error(f"Failed to connect to DB: {e}")
    sys.exit(1)




# Ensure schema
cur.execute("""
CREATE TABLE IF NOT EXISTS packets (
    id SERIAL PRIMARY KEY,
    src_ip VARCHAR(50),
    dst_ip VARCHAR(50),
    protocol VARCHAR(20),
    src_port VARCHAR(10),
    dst_port VARCHAR(10),
    dns_query TEXT,
    summary TEXT,
    timestamp TIMESTAMP,
    source VARCHAR(10) DEFAULT 'LIVE'
);
""")
conn.commit()

@app.route("/store", methods=["POST"])
def store_packet():
    pkt = request.json
    cur.execute("""
        INSERT INTO packets (src_ip, dst_ip, protocol, src_port, dst_port, dns_query, summary, timestamp, source)
        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
    """, (
        pkt.get("src_ip"),
        pkt.get("dst_ip"),
        pkt.get("protocol"),
        pkt.get("src_port"),
        pkt.get("dst_port"),
        pkt.get("dns_query"),
        pkt.get("summary"),
        pkt.get("timestamp"),
        pkt.get("source", "LIVE")
    ))
    conn.commit()
    logging.info(f"Stored packet {pkt.get('protocol')} {pkt.get('src_ip')}->{pkt.get('dst_ip')}")
    return jsonify({"status": "stored"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5002)
